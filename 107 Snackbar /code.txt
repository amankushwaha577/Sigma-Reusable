// reducers/snackbarReducer.js
const initialState = {
  isOpen: false,
  message: "",
};

export const snackbarReducer = (state = initialState, action) => {
  switch (action.type) {
    case "SHOW_SNACKBAR":
      return {
        ...state,
        isOpen: true,
        message: action.payload,
      };
    case "HIDE_SNACKBAR":
      return {
        ...state,
        isOpen: false,
        message: "",
      };
    default:
      return state;
  }
};

// Action creators
export const showSnackbar = (message) => ({
  type: "SHOW_SNACKBAR",
  payload: message,
});

export const hideSnackbar = () => ({
  type: "HIDE_SNACKBAR",
});












------------------------
  import React, { useEffect } from "react";

const Snackbar = ({ message, isOpen, onClose }) => {
  useEffect(() => {
    if (isOpen) {
      const timer = setTimeout(onClose, 3000); // Auto close after 3 seconds
      return () => clearTimeout(timer); // Cleanup timer
    }
  }, [isOpen, onClose]);

  return (
    isOpen && (
      <div style={styles.snackbarContainer}>
        <div style={styles.snackbar}>
          <div style={styles.messageContainer}>
            <span style={styles.message}>{message}</span>
            <button style={styles.closeButton} onClick={onClose}>
              &times;
            </button>
          </div>
        </div>
      </div>
    )
  );
};

const styles = {
  snackbarContainer: {
    position: "fixed",
    bottom: "20px",
    right: "20px",
    zIndex: 9999,
    animation: "slideIn 0.5s ease-out, slideOut 0.5s ease-out 2.5s", // Custom animations
  },
  snackbar: {
    background: "linear-gradient(135deg, #ff416c, #ff4b2b)",
    color: "#fff",
    padding: "1rem 1.5rem",
    borderRadius: "12px",
    boxShadow: "0px 8px 15px rgba(0, 0, 0, 0.5)",
    display: "flex",
    alignItems: "center",
    maxWidth: "300px",
    wordWrap: "break-word",
    fontSize: "1rem",
  },
  messageContainer: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    width: "100%",
  },
  message: {
    fontSize: "1rem",
    fontWeight: "500",
  },
  closeButton: {
    background: "transparent",
    border: "none",
    color: "#fff",
    fontSize: "1.2rem",
    fontWeight: "bold",
    cursor: "pointer",
    marginLeft: "10px",
    transition: "color 0.3s ease",
  },
};

// Keyframes for animations
styles['@keyframes slideIn'] = {
  '0%': { opacity: 0, transform: 'translateY(30px)' },
  '100%': { opacity: 1, transform: 'translateY(0)' },
};

styles['@keyframes slideOut'] = {
  '0%': { opacity: 1, transform: 'translateY(0)' },
  '100%': { opacity: 0, transform: 'translateY(30px)' },
};

export default Snackbar;














--------------------
// pages/_app.js
import { Provider, useDispatch, useSelector } from "react-redux";
import store from "../store";
import Snackbar from "../components/Snackbar";
import { hideSnackbar } from "../reducers/snackbarReducer";

function MyApp({ Component, pageProps }) {
  const snackbar = useSelector((state) => state.snackbar);
  const dispatch = useDispatch();

  const closeSnackbar = () => {
    dispatch(hideSnackbar());
  };

  return (
    <Provider store={store}>
      <Snackbar
        message={snackbar.message}
        isOpen={snackbar.isOpen}
        onClose={closeSnackbar}
      />
      <Component {...pageProps} />
    </Provider>
  );
}

export default MyApp;







// Example: actions/apiActions.js
import { showSnackbar } from "../reducers/snackbarReducer";

export const fetchData = () => {
  return async (dispatch) => {
    try {
      const response = await fetch("/api/data");
      const data = await response.json();
      dispatch(showSnackbar("Data fetched successfully!")); // Show snackbar
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };
};
